{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // Create card methods slide\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    // Add card (+)\n    addItemToCard(state, action) {\n      // get action from user after selected item\n      const newItem = action.payload; // Check if existing item\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true; // If other item -> add new item object\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          // default = total price\n          quantity: 1,\n          totalPrice: newItem.price,\n          //  // default = price\n          name: newItem.title\n        }); // Else -> update to existing item\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    // Remove card (-)\n    removeItemToCard(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/ducdan/Desktop/Mooc project/MoocProjectCode/src/components/Store/Card-slide.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCard","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemToCard","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC1BE,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,aAAa,EAAE,CAFL;AAGVC,IAAAA,OAAO,EAAE;AAHC,GAFY;AAO1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACJ,aAAN,GAAsBK,MAAM,CAACC,OAAP,CAAeN,aAArC;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAAP,CAAeP,KAA7B;AACD,KAJG;;AAKN;AACAQ,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAe;AACvB;AACD,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB,CAFwB,CAGxB;;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB;AAEAR,MAAAA,KAAK,CAACJ,aAAN;AACAI,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB,CAPwB,CAQxB;;AACA,UAAI,CAACQ,YAAL,EAAmB;AACjBL,QAAAA,KAAK,CAACL,KAAN,CAAYc,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADG;AAEfE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFA;AAEQ;AACvBC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAER,OAAO,CAACM,KAJL;AAIY;AAC3BjB,UAAAA,IAAI,EAAEW,OAAO,CAACS;AALC,SAAjB,EADiB,CAQnB;AACC,OATD,MASO;AACLR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BR,OAAO,CAACM,KAA5D;AACH;AACF,KA5BK;;AA6BN;AACAI,IAAAA,gBAAgB,CAACd,KAAD,EAAQC,MAAR,EAAe;AAC3B,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAR,MAAAA,KAAK,CAACJ,aAAN;AACAI,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;;AACA,UAAIQ,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC/BX,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYoB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACD;AACJ;;AAzCK;AAPgB,CAAD,CAA7B;AAoDA,OAAO,MAAMM,WAAW,GAAGxB,SAAS,CAACyB,OAA9B;AAEP,eAAezB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create card methods slide\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n        changed: false,\n    },\n    reducers: {\n        replaceCart(state, action) {\n            state.totalQuantity = action.payload.totalQuantity;\n            state.items = action.payload.items;\n          },\n        // Add card (+)\n        addItemToCard(state, action){\n             // get action from user after selected item\n            const newItem = action.payload;\n            // Check if existing item\n            const existingItem = state.items.find((item) => item.id === newItem.id);\n\n            state.totalQuantity++;\n            state.changed = true;\n            // If other item -> add new item object\n            if (!existingItem) {\n              state.items.push({\n                id: newItem.id,\n                price: newItem.price,  // default = total price\n                quantity: 1,\n                totalPrice: newItem.price, //  // default = price\n                name: newItem.title,\n              });\n            // Else -> update to existing item\n            } else {\n              existingItem.quantity++;\n              existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n          }  \n        },\n        // Remove card (-)\n        removeItemToCard(state, action){\n            const id = action.payload;\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalQuantity--;\n            state.changed = true;\n            if (existingItem.quantity === 1) {\n              state.items = state.items.filter((item) => item.id !== id);\n            } else {\n              existingItem.quantity--;\n              existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n        }\n    }\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}